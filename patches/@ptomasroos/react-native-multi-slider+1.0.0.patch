patch-package
--- a/node_modules/@ptomasroos/react-native-multi-slider/MultiSlider.js
+++ b/node_modules/@ptomasroos/react-native-multi-slider/MultiSlider.js
@@ -1,3 +1,5 @@
+// @flow
+
 import React from 'react';
 import PropTypes from 'prop-types';
 
@@ -7,7 +9,8 @@ import {
   View,
   TouchableHighlight,
   Platform,
-  I18nManager
+  I18nManager,
+  Text,
 } from 'react-native';
 
 import DefaultMarker from './DefaultMarker';
@@ -59,12 +62,9 @@ export default class MultiSlider extends React.Component {
 
   static defaultProps = {
     values: [0],
-    onValuesChangeStart: () => {
-    },
-    onValuesChange: values => {
-    },
-    onValuesChangeFinish: values => {
-    },
+    onValuesChangeStart: () => {},
+    onValuesChange: values => {},
+    onValuesChangeFinish: values => {},
     step: 1,
     min: 0,
     max: 10,
@@ -93,12 +93,14 @@ export default class MultiSlider extends React.Component {
   constructor(props) {
     super(props);
 
-    this.optionsArray = this.props.optionsArray ||
+    this.optionsArray =
+      this.props.optionsArray ||
       createArray(this.props.min, this.props.max, this.props.step);
     this.stepLength = this.props.sliderLength / this.optionsArray.length;
 
-    var initialValues = this.props.values.map(value =>
-      valueToPosition(value, this.optionsArray, this.props.sliderLength));
+    const initialValues = this.props.values.map(value =>
+      valueToPosition(value, this.optionsArray, this.props.sliderLength)
+    );
 
     this.state = {
       pressedOne: true,
@@ -108,12 +110,14 @@ export default class MultiSlider extends React.Component {
       pastTwo: initialValues[1],
       positionOne: initialValues[0],
       positionTwo: initialValues[1],
+      labelEndWidth: 0,
+      labelStartWidth: 0,
     };
   }
 
   componentWillMount() {
-    var customPanResponder = (start, move, end) => {
-      return PanResponder.create({
+    const customPanResponder = (start, move, end) =>
+      PanResponder.create({
         onStartShouldSetPanResponder: (evt, gestureState) => true,
         onStartShouldSetPanResponderCapture: (evt, gestureState) => true,
         onMoveShouldSetPanResponder: (evt, gestureState) => true,
@@ -125,17 +129,16 @@ export default class MultiSlider extends React.Component {
         onPanResponderTerminate: (evt, gestureState) => end(gestureState),
         onShouldBlockNativeResponder: (evt, gestureState) => true,
       });
-    };
 
     this._panResponderOne = customPanResponder(
       this.startOne,
       this.moveOne,
-      this.endOne,
+      this.endOne
     );
     this._panResponderTwo = customPanResponder(
       this.startTwo,
       this.moveTwo,
-      this.endTwo,
+      this.endTwo
     );
   }
 
@@ -144,33 +147,35 @@ export default class MultiSlider extends React.Component {
       return;
     }
 
-    let nextState = {};
-    if (nextProps.min !== this.props.min ||
-        nextProps.max !== this.props.max ||
-        nextProps.values[0] !== this.state.valueOne ||
-        nextProps.sliderLength !== this.props.sliderLength ||
-        nextProps.values[1] !== this.state.valueTwo ||
-        (nextProps.sliderLength !== this.props.sliderLength &&
-            nextProps.values[1])
+    const nextState = {};
+    if (
+      nextProps.min !== this.props.min ||
+      nextProps.max !== this.props.max ||
+      nextProps.values[0] !== this.state.valueOne ||
+      nextProps.sliderLength !== this.props.sliderLength ||
+      nextProps.values[1] !== this.state.valueTwo ||
+      (nextProps.sliderLength !== this.props.sliderLength &&
+        nextProps.values[1])
     ) {
-      this.optionsArray = this.props.optionsArray ||
+      this.optionsArray =
+        this.props.optionsArray ||
         createArray(nextProps.min, nextProps.max, nextProps.step);
 
       this.stepLength = this.props.sliderLength / this.optionsArray.length;
 
-      var positionOne = valueToPosition(
+      const positionOne = valueToPosition(
         nextProps.values[0],
         this.optionsArray,
-        nextProps.sliderLength,
+        nextProps.sliderLength
       );
       nextState.valueOne = nextProps.values[0];
       nextState.pastOne = positionOne;
       nextState.positionOne = positionOne;
 
-      var positionTwo = valueToPosition(
+      const positionTwo = valueToPosition(
         nextProps.values[1],
         this.optionsArray,
-        nextProps.sliderLength,
+        nextProps.sliderLength
       );
       nextState.valueTwo = nextProps.values[1];
       nextState.pastTwo = positionTwo;
@@ -204,25 +209,27 @@ export default class MultiSlider extends React.Component {
     if (!this.props.enabledOne) {
       return;
     }
-    const unconfined = I18nManager.isRTL ? this.state.pastOne - gestureState.dx : gestureState.dx + this.state.pastOne;
-    var bottom = 0;
-    var trueTop = this.state.positionTwo - (this.props.allowOverlap ? 0 : this.stepLength);
-    var top = trueTop === 0 ? 0 : trueTop || this.props.sliderLength;
-    var confined = unconfined < bottom
-      ? bottom
-      : unconfined > top ? top : unconfined;
-    var slipDisplacement = this.props.touchDimensions.slipDisplacement;
+    const unconfined = I18nManager.isRTL
+      ? this.state.pastOne - gestureState.dx
+      : gestureState.dx + this.state.pastOne;
+    const bottom = 0;
+    const trueTop =
+      this.state.positionTwo - (this.props.allowOverlap ? 0 : this.stepLength);
+    const top = trueTop === 0 ? 0 : trueTop || this.props.sliderLength;
+    const confined =
+      unconfined < bottom ? bottom : unconfined > top ? top : unconfined;
+    const slipDisplacement = this.props.touchDimensions.slipDisplacement;
 
     if (Math.abs(gestureState.dy) < slipDisplacement || !slipDisplacement) {
-      var value = positionToValue(
+      const value = positionToValue(
         confined,
         this.optionsArray,
-        this.props.sliderLength,
+        this.props.sliderLength
       );
-      var snapped = valueToPosition(
+      const snapped = valueToPosition(
         value,
         this.optionsArray,
-        this.props.sliderLength,
+        this.props.sliderLength
       );
       this.setState({
         positionOne: this.props.snapped ? snapped : confined,
@@ -234,12 +241,12 @@ export default class MultiSlider extends React.Component {
             valueOne: value,
           },
           () => {
-            var change = [this.state.valueOne];
+            const change = [this.state.valueOne];
             if (this.state.valueTwo) {
               change.push(this.state.valueTwo);
             }
             this.props.onValuesChange(change);
-          },
+          }
         );
       }
     }
@@ -249,24 +256,26 @@ export default class MultiSlider extends React.Component {
     if (!this.props.enabledTwo) {
       return;
     }
-    const unconfined = I18nManager.isRTL ? this.state.pastTwo - gestureState.dx : gestureState.dx + this.state.pastTwo;
-    var bottom = this.state.positionOne + (this.props.allowOverlap ? 0 : this.stepLength);
-    var top = this.props.sliderLength;
-    var confined = unconfined < bottom
-      ? bottom
-      : unconfined > top ? top : unconfined;
-    var slipDisplacement = this.props.touchDimensions.slipDisplacement;
+    const unconfined = I18nManager.isRTL
+      ? this.state.pastTwo - gestureState.dx
+      : gestureState.dx + this.state.pastTwo;
+    const bottom =
+      this.state.positionOne + (this.props.allowOverlap ? 0 : this.stepLength);
+    const top = this.props.sliderLength;
+    const confined =
+      unconfined < bottom ? bottom : unconfined > top ? top : unconfined;
+    const slipDisplacement = this.props.touchDimensions.slipDisplacement;
 
     if (Math.abs(gestureState.dy) < slipDisplacement || !slipDisplacement) {
-      var value = positionToValue(
+      const value = positionToValue(
         confined,
         this.optionsArray,
-        this.props.sliderLength,
+        this.props.sliderLength
       );
-      var snapped = valueToPosition(
+      const snapped = valueToPosition(
         value,
         this.optionsArray,
-        this.props.sliderLength,
+        this.props.sliderLength
       );
 
       this.setState({
@@ -279,8 +288,11 @@ export default class MultiSlider extends React.Component {
             valueTwo: value,
           },
           () => {
-            this.props.onValuesChange([this.state.valueOne, this.state.valueTwo]);
-          },
+            this.props.onValuesChange([
+              this.state.valueOne,
+              this.state.valueTwo,
+            ]);
+          }
         );
       }
     }
@@ -298,12 +310,12 @@ export default class MultiSlider extends React.Component {
         onePressed: !this.state.onePressed,
       },
       () => {
-        var change = [this.state.valueOne];
+        const change = [this.state.valueOne];
         if (this.state.valueTwo) {
           change.push(this.state.valueTwo);
         }
         this.props.onValuesChangeFinish(change);
-      },
+      }
     );
   };
 
@@ -323,14 +335,107 @@ export default class MultiSlider extends React.Component {
           this.state.valueOne,
           this.state.valueTwo,
         ]);
-      },
+      }
     );
   };
 
+  getTranslateOne = () => {
+    const {
+      positionOne,
+      positionTwo,
+      labelEndWidth,
+      labelStartWidth,
+    } = this.state;
+
+    const twoEndCondition =
+      positionTwo + labelEndWidth / 2 > this.props.sliderLength;
+
+    if (positionOne - labelStartWidth / 2 < 0) {
+      return 0;
+    }
+
+    const defaultPosition = positionOne - labelStartWidth / 2;
+
+    const markersGap = positionTwo - positionOne;
+    const diff = twoEndCondition
+      ? markersGap - (labelEndWidth / 2 + labelStartWidth / 2) - 10
+      : markersGap - (labelEndWidth + labelStartWidth / 2) - 10;
+
+    if (
+      twoEndCondition &&
+      markersGap - (labelEndWidth + labelStartWidth / 2) - 10 < 0
+    ) {
+      // collision with marker one stick to left
+      return (
+        defaultPosition +
+        markersGap -
+        (labelEndWidth + labelStartWidth / 2) -
+        10
+      );
+    }
+
+    if (diff < 0) {
+      // collision
+      return defaultPosition + diff / 2;
+    }
+
+    return defaultPosition;
+  };
+
+  getTranslateTwo = () => {
+    const {
+      positionOne,
+      positionTwo,
+      labelEndWidth,
+      labelStartWidth,
+    } = this.state;
+
+    const oneEndCondition = positionOne - labelStartWidth / 2 < 0;
+
+    if (positionTwo + labelEndWidth / 2 > this.props.sliderLength) {
+      return (
+        positionTwo -
+        labelEndWidth / 2 -
+        (positionTwo + labelEndWidth / 2 - this.props.sliderLength)
+      );
+    }
+
+    const defaultPosition = positionTwo - labelEndWidth / 2;
+
+    const markersGap = positionTwo - positionOne;
+    const diff = markersGap - (labelEndWidth / 2 + labelStartWidth / 2) - 20;
+
+    if (diff < 0 && oneEndCondition) {
+      // collision with marker one stick to left
+      return defaultPosition - diff;
+    }
+
+    if (diff < 0) {
+      // collision
+      return defaultPosition - diff / 2;
+    }
+
+    return defaultPosition;
+  };
+
+  saveLabelEndWidth = (e: OnLayout) => {
+    this.setState({ labelEndWidth: Math.floor(e.nativeEvent.layout.width) });
+  };
+
+  saveLabelStartWidth = (e: OnLayout) => {
+    this.setState({ labelStartWidth: Math.floor(e.nativeEvent.layout.width) });
+  };
+
   render() {
     const { positionOne, positionTwo } = this.state;
-    const { selectedStyle, unselectedStyle, sliderLength, markerOffsetX, markerOffsetY } = this.props;
-    const twoMarkers = this.props.values.length == 2;   // when allowOverlap, positionTwo could be 0, identified as string '0' and throwing 'RawText 0 needs to be wrapped in <Text>' error
+    const {
+      selectedStyle,
+      unselectedStyle,
+      sliderLength,
+      markerOffsetX,
+      markerOffsetY,
+    } = this.props;
+    const twoMarkers = this.props.values.length == 2; // when allowOverlap, positionTwo could be 0, identified as string '0' and throwing 'RawText 0 needs to be wrapped in <Text>' error
 
     const trackOneLength = positionOne;
     const trackOneStyle = twoMarkers
@@ -358,9 +463,15 @@ export default class MultiSlider extends React.Component {
       borderRadius: borderRadius || 0,
     };
 
-    const markerContainerOne = { top: markerOffsetY - 24, left : trackOneLength + markerOffsetX - 24 }
+    const markerContainerOne = {
+      top: markerOffsetY - 24,
+      left: trackOneLength + markerOffsetX - 24,
+    };
 
-    const markerContainerTwo = { top: markerOffsetY - 24, right: trackThreeLength + markerOffsetX - 24 };
+    const markerContainerTwo = {
+      top: markerOffsetY - 24,
+      right: trackThreeLength + markerOffsetX - 24,
+    };
 
     return (
       <View style={[styles.container, this.props.containerStyle]}>
@@ -381,15 +492,62 @@ export default class MultiSlider extends React.Component {
               { width: trackTwoLength },
             ]}
           />
-          {twoMarkers &&
+          {twoMarkers && (
+            <View
+              style={[
+                styles.track,
+                this.props.trackStyle,
+                trackThreeStyle,
+                { width: trackThreeLength },
+              ]}
+            />
+          )}
           <View
-            style={[
-              styles.track,
-              this.props.trackStyle,
-              trackThreeStyle,
-              { width: trackThreeLength },
-            ]}
-          />}
+            style={{
+              position: 'absolute',
+              bottom: 18,
+              transform: [
+                {
+                  translateX: this.getTranslateOne(),
+                },
+              ],
+            }}
+            onLayout={this.saveLabelStartWidth}
+          >
+            <Text
+              style={{
+                textAlign: 'center',
+                fontSize: 14,
+                color: '#0176D2',
+              }}
+            >
+              {this.state.startLabel || this.state.valueOne}
+            </Text>
+          </View>
+          {this.state.valueTwo !== undefined && (
+            <View
+              style={{
+                bottom: 18,
+                position: 'absolute',
+                transform: [
+                  {
+                    translateX: this.getTranslateTwo(),
+                  },
+                ],
+              }}
+              onLayout={this.saveLabelEndWidth}
+            >
+              <Text
+                style={{
+                  textAlign: 'center',
+                  fontSize: 14,
+                  color: '#0176D2',
+                }}
+              >
+                {this.props.endLabel || this.state.valueTwo}
+              </Text>
+            </View>
+          )}
           <View
             style={[
               styles.markerContainer,
@@ -399,12 +557,18 @@ export default class MultiSlider extends React.Component {
             ]}
           >
             <View
-              style={[styles.touch, touchStyle]}
-              ref={component => this._markerOne = component}
-              {...this._panResponderOne.panHandlers}
+              style={{
+                justifyContent: 'center',
+                alignItems: 'center',
+              }}
             >
-                {isMarkersSeparated === false ?
-                <Marker
+              <View
+                style={[styles.touch, touchStyle]}
+                ref={component => (this._markerOne = component)}
+                {...this._panResponderOne.panHandlers}
+              >
+                {isMarkersSeparated === false ? (
+                  <Marker
                     enabled={this.props.enabledOne}
                     pressed={this.state.onePressed}
                     markerStyle={[styles.marker, this.props.markerStyle]}
@@ -412,9 +576,9 @@ export default class MultiSlider extends React.Component {
                     currentValue={this.state.valueOne}
                     valuePrefix={this.props.valuePrefix}
                     valueSuffix={this.props.valueSuffix}
-                />
-                :
-                <MarkerLeft
+                  />
+                ) : (
+                  <MarkerLeft
                     enabled={this.props.enabledOne}
                     pressed={this.state.onePressed}
                     markerStyle={[styles.marker, this.props.markerStyle]}
@@ -422,42 +586,57 @@ export default class MultiSlider extends React.Component {
                     currentValue={this.state.valueOne}
                     valuePrefix={this.props.valuePrefix}
                     valueSuffix={this.props.valueSuffix}
-                    />
-                }
-
+                  />
+                )}
+              </View>
             </View>
           </View>
-          {twoMarkers &&
-          positionOne !== this.props.sliderLength &&
-          <View style={[styles.markerContainer, markerContainerTwo, this.props.markerContainerStyle]}>
-            <View
-              style={[styles.touch, touchStyle]}
-              ref={component => this._markerTwo = component}
-              {...this._panResponderTwo.panHandlers}
-            >
-                {isMarkersSeparated === false ?
-                <Marker
-                    pressed={this.state.twoPressed}
-                    markerStyle={this.props.markerStyle}
-                    pressedMarkerStyle={this.props.pressedMarkerStyle}
-                    currentValue={this.state.valueTwo}
-                    enabled={this.props.enabledTwo}
-                    valuePrefix={this.props.valuePrefix}
-                    valueSuffix={this.props.valueSuffix}
-                />
-                :
-                <MarkerRight
-                    pressed={this.state.twoPressed}
-                    markerStyle={this.props.markerStyle}
-                    pressedMarkerStyle={this.props.pressedMarkerStyle}
-                    currentValue={this.state.valueTwo}
-                    enabled={this.props.enabledTwo}
-                    valuePrefix={this.props.valuePrefix}
-                    valueSuffix={this.props.valueSuffix}
-                />
-                }
+          {twoMarkers && positionOne !== this.props.sliderLength && (
+            <View>
+              <View
+                style={[
+                  styles.markerContainer,
+                  markerContainerTwo,
+                  this.props.markerContainerStyle,
+                ]}
+              >
+                <View
+                  style={{
+                    justifyContent: 'center',
+                    alignItems: 'center',
+                  }}
+                >
+                  <View
+                    style={[styles.touch, touchStyle]}
+                    ref={component => (this._markerTwo = component)}
+                    {...this._panResponderTwo.panHandlers}
+                  >
+                    {isMarkersSeparated === false ? (
+                      <Marker
+                        pressed={this.state.twoPressed}
+                        markerStyle={this.props.markerStyle}
+                        pressedMarkerStyle={this.props.pressedMarkerStyle}
+                        currentValue={this.state.valueTwo}
+                        enabled={this.props.enabledTwo}
+                        valuePrefix={this.props.valuePrefix}
+                        valueSuffix={this.props.valueSuffix}
+                      />
+                    ) : (
+                      <MarkerRight
+                        pressed={this.state.twoPressed}
+                        markerStyle={this.props.markerStyle}
+                        pressedMarkerStyle={this.props.pressedMarkerStyle}
+                        currentValue={this.state.valueTwo}
+                        enabled={this.props.enabledTwo}
+                        valuePrefix={this.props.valuePrefix}
+                        valueSuffix={this.props.valueSuffix}
+                      />
+                    )}
+                  </View>
+                </View>
+              </View>
             </View>
-          </View>}
+          )}
         </View>
       </View>
     );
@@ -468,7 +647,7 @@ const styles = StyleSheet.create({
   container: {
     position: 'relative',
     height: 50,
-    justifyContent: 'center'
+    justifyContent: 'center',
   },
   fullTrack: {
     flexDirection: 'row',
